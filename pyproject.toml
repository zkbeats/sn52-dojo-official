[build-system]
requires = ["setuptools>=69.4.2", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
requires-python = ">=3.10"
name = "dojo"
description = "dojo subnet"
readme = "README.md"
authors = [
  {name = "jarvis8x7b"},
  {name = "karootplx"},
  {name = "codebender37"}
]
license = {text = "MIT"}
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Topic :: Software Development :: Build Tools",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Python Modules"
]
dynamic = ["version"]
dependencies = [
  "aiohttp==3.10.11",
  "bittensor @ git+https://github.com/opentensor/bittensor.git@release/9.0.0",
  "bittensor-cli @ git+https://github.com/opentensor/btcli.git@release/9.0.0",
  "fastapi==0.110.1",
  "httpx==0.27.0",
  "loguru==0.7.2",
  "numpy==2.0.1",
  "pingouin==0.5.4",
  "prompt_toolkit==3.0.47",
  "pydantic==2.8.2",
  "pydantic-settings==2.2.1",
  "python-dotenv==1.0.1",
  "scikit-learn==1.5.1",
  "scipy==1.14.0",
  "StrEnum==0.4.15",
  "tenacity==8.5.0",
  "torch==2.3.1+cpu; sys_platform == 'linux'",
  "torch==2.3.1; sys_platform == 'darwin'",
  "uvicorn==0.22.0",
  "redis==5.0.7",
  "prisma==0.15.0",
  "beautifulsoup4==4.12.3",
  "jsmin==3.0.1",
  "plotext==5.3.2",
  "websocket-client==1.8.0",
  "aioboto3==13.4.0",
  "aiofiles==24.1.0",
  "python-multipart==0.0.20"
]

[project.optional-dependencies]
dev = ["commitizen", "curlify2", "pytest", "ruff", "tabulate", "termcolor"]
test = ["pytest", "nox", 'pytest-asyncio==0.25.1']

[project.scripts]
dojo = "dojo_cli:main"

[project.urls]
Homepage = "https://github.com/tensorplex-labs/dojo"
Documentation = "https://docs.tensorplex.ai/tensorplex-docs/tensorplex-dojo-testnet"
Repository = "https://github.com/tensorplex-labs/dojo"

[tool.commitizen]
name = "cz_conventional_commits"

[tool.pyright]
exclude = ["**/__pycache__", "database/prisma", "wandb", ".nox"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  ".idea",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
  "venv",
  "wandb",
  "database/prisma"
]
show-fixes = true
output-format = "full"
# Same as Black.
line-length = 88
indent-width = 4
extend-exclude = ["dojo-synthetic-api"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = [
  "E4", # import-related errors (e.g., unused imports, import order)
  "E7", # statement-related errors (e.g., multiple statements on one line)
  "E9", # runtime errors (e.g., syntax errors, undefined names)
  "F", # pyflakes errors (e.g., unused variables, undefined names)
  "UP", # pyupgrade rules (suggests newer python syntax)
  "I" # isort rules (sorts and organizes imports)
]
ignore = [
  "UP006", # Preserve 'typing.Tuple' instead of 'tuple'
  "UP035", # Preserve 'typing.Dict' instead of 'dict'
  "C901", # Ignore McCabe complexity (if you use flake8 complexity checks)
  "E203" # Ignore whitespace before ':', conflicts with Black] # Ignore specific pyupgrade rules that prevent the project from running
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.isort]
# this explicitly tells isort to treat wandb as a third-party package
known-third-party = []

[tool.setuptools]
packages = {find = {}}
include-package-data = true
# allows us to use CLI even though it is a standalone script
py-modules = ["dojo_cli"]

[tool.setuptools_scm]
version_scheme = "only-version"
local_scheme = "no-local-version"
tag_regex = "^v(?P<scm_version>\\d+\\.\\d+\\.\\d+)"

[tool.uv]
prerelease = "allow"
